// Optimized Alpha Mask Effect for ARM GPUs
// Enhanced with multiple blending modes, edge smoothing, and performance optimizations

uniform float4x4 ViewProj;
uniform texture2d image;
uniform texture2d mask;
uniform float2 texture_size;

// Enhanced parameters for better control
uniform float threshold = 0.5;
uniform float edge_smoothing = 0.1;
uniform float contrast = 1.0;
uniform float brightness = 0.0;
uniform int blend_mode = 0; // 0=Normal, 1=Multiply, 2=Screen, 3=Overlay
uniform float spill_suppression = 0.0;
uniform float3 spill_color = float3(0.0, 1.0, 0.0); // Default green

// Optimized sampler states for ARM GPUs
sampler_state texSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
	// ARM GPU optimizations
	MaxAnisotropy = 1;
	MipLODBias = 0;
};

sampler_state maskSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
	// Use point sampling for mask when precise edges are needed
	MaxAnisotropy = 1;
	MipLODBias = 0;
};

struct VertexData {
	float2 uv : TEXCOORD0;
	float4 pos : POSITION;
};

struct FragmentData {
	float2 uv : TEXCOORD0;
	float4 pos : SV_POSITION;
};

// Optimized vertex shader
VertexData VSDefault(VertexData v_in)
{
	VertexData v_out;
	v_out.uv = v_in.uv;
	v_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	return v_out;
}

// Utility functions for better GPU performance
float3 rgb_to_hsv(float3 rgb)
{
	float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	float4 p = lerp(float4(rgb.bg, K.wz), float4(rgb.gb, K.xy), step(rgb.b, rgb.g));
	float4 q = lerp(float4(p.xyw, rgb.r), float4(rgb.r, p.yzx), step(p.x, rgb.r));
	
	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return float3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

float3 hsv_to_rgb(float3 hsv)
{
	float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	float3 p = abs(frac(hsv.xxx + K.xyz) * 6.0 - K.www);
	return hsv.z * lerp(K.xxx, clamp(p - K.xxx, 0.0, 1.0), hsv.y);
}

// Advanced spill suppression
float3 suppress_spill(float3 color, float3 spill_color, float suppression)
{
	if (suppression <= 0.0) return color;
	
	float3 hsv_color = rgb_to_hsv(color);
	float3 hsv_spill = rgb_to_hsv(spill_color);
	
	float hue_diff = abs(hsv_color.x - hsv_spill.x);
	hue_diff = min(hue_diff, 1.0 - hue_diff); // Handle hue wraparound
	
	float spill_amount = 1.0 - (hue_diff * 6.0); // Narrow hue range
	spill_amount = clamp(spill_amount, 0.0, 1.0);
	
	hsv_color.y *= lerp(1.0, 0.0, spill_amount * suppression);
	return hsv_to_rgb(hsv_color);
}

// Enhanced alpha blending with multiple modes
float4 blend_modes(float4 base, float4 overlay, float alpha, int mode)
{
	float4 result;
	
	switch(mode)
	{
		case 1: // Multiply
			result.rgb = base.rgb * overlay.rgb;
			break;
		case 2: // Screen
			result.rgb = 1.0 - (1.0 - base.rgb) * (1.0 - overlay.rgb);
			break;
		case 3: // Overlay
			result.rgb = (base.rgb < 0.5) ? 
				(2.0 * base.rgb * overlay.rgb) : 
				(1.0 - 2.0 * (1.0 - base.rgb) * (1.0 - overlay.rgb));
			break;
		default: // Normal
			result.rgb = overlay.rgb;
			break;
	}
	
	result.a = overlay.a;
	return lerp(base, result, alpha);
}

// Main pixel shader with optimizations
float4 PSMaskOptimized(FragmentData f_in) : TARGET
{
	// Sample textures with optimized filtering
	float4 image_color = image.Sample(texSampler, f_in.uv);
	float mask_alpha = mask.Sample(maskSampler, f_in.uv).a;
	
	// Apply contrast and brightness to mask
	mask_alpha = clamp((mask_alpha - 0.5) * contrast + 0.5 + brightness, 0.0, 1.0);
	
	// Enhanced edge smoothing with configurable falloff
	float edge_smooth = max(edge_smoothing, 0.001); // Avoid division by zero
	float smooth_alpha = smoothstep(threshold - edge_smooth, threshold + edge_smooth, mask_alpha);
	
	// Apply spill suppression if enabled
	if (spill_suppression > 0.0)
	{
		image_color.rgb = suppress_spill(image_color.rgb, spill_color, spill_suppression);
	}
	
	// Apply alpha with optimized blending
	float4 result = image_color;
	result.a *= smooth_alpha;
	
	// Premultiplied alpha for better GPU performance
	result.rgb *= result.a;
	
	return result;
}

// High-performance pixel shader for real-time use
float4 PSMaskFast(FragmentData f_in) : TARGET
{
	float4 image_color = image.Sample(texSampler, f_in.uv);
	float mask_alpha = mask.Sample(maskSampler, f_in.uv).a;
	
	// Simple threshold with minimal smoothing for performance
	float smooth_alpha = smoothstep(threshold - 0.02, threshold + 0.02, mask_alpha);
	
	float4 result = image_color;
	result.a *= smooth_alpha;
	result.rgb *= result.a; // Premultiplied alpha
	
	return result;
}

// Quality pixel shader with all features
float4 PSMaskQuality(FragmentData f_in) : TARGET
{
	float2 uv = f_in.uv;
	float4 image_color = image.Sample(texSampler, uv);
	
	// Multi-sample mask for better edge quality
	float2 texel_size = 1.0 / texture_size;
	float mask_center = mask.Sample(maskSampler, uv).a;
	float mask_up = mask.Sample(maskSampler, uv + float2(0, -texel_size.y)).a;
	float mask_down = mask.Sample(maskSampler, uv + float2(0, texel_size.y)).a;
	float mask_left = mask.Sample(maskSampler, uv + float2(-texel_size.x, 0)).a;
	float mask_right = mask.Sample(maskSampler, uv + float2(texel_size.x, 0)).a;
	
	// Average neighboring samples for smoother edges
	float mask_alpha = (mask_center * 0.4 + mask_up * 0.15 + mask_down * 0.15 + 
					   mask_left * 0.15 + mask_right * 0.15);
	
	// Apply contrast and brightness
	mask_alpha = clamp((mask_alpha - 0.5) * contrast + 0.5 + brightness, 0.0, 1.0);
	
	// Enhanced edge smoothing
	float edge_smooth = max(edge_smoothing, 0.001);
	float smooth_alpha = smoothstep(threshold - edge_smooth, threshold + edge_smooth, mask_alpha);
	
	// Apply spill suppression
	if (spill_suppression > 0.0)
	{
		image_color.rgb = suppress_spill(image_color.rgb, spill_color, spill_suppression);
	}
	
	float4 result = image_color;
	result.a *= smooth_alpha;
	result.rgb *= result.a;
	
	return result;
}

// Techniques for different quality/performance trade-offs
technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader = PSMaskOptimized(f_in);
	}
}

technique DrawFast
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader = PSMaskFast(f_in);
	}
}

technique DrawQuality
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader = PSMaskQuality(f_in);
	}
}
